@page "/pages/form/{id:long?}"
@model FormHandlerModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc.Rendering;

<div class="m-2">
    <h5 class="bg-primary text-white text-center p-2">HTML Form</h5>
    <form asp-page="FormHandler" method="post" id="htmlform">
        <div class="mb-3">
            <label asp-for="Product!.ProductId"></label>
            <input class="form-control" asp-for="Product!.ProductId" />
        </div>
        <div class="mb-3">
            <label asp-for=Product!.Name></label>
            <input class="form-control" asp-for="Product!.Name" />
        </div>
        <div class="mb-3">
            <label asp-for="Product!.Price"></label>
            <input class="form-control" asp-for="Product!.Price" />
        </div>
        <div class="mb-3">
            <label asp-for="Product!.Category!.Name">Category</label>
            <input class="form-control" asp-for="Product!.Category!.Name" />
        </div>
        <div class="mb-3">
            <label asp-for="Product!.Supplier!.Name">Supplier</label>
            <input class="form-control" asp-for="Product!.Supplier!.Name" />
        </div>
        <select class="form-control mb-3" asp-for="Product!.CategoryId" asp-items="@((SelectList?)ViewData["categories"])">
        </select>
        
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </form>

    <button form="htmlform" asp-page="FormHandler" class="btn btn-primary mt-2">
        Submit (Outside Form)
    </button>
</div>

@functions {
    [IgnoreAntiforgeryToken]
    public class FormHandlerModel : PageModel
    {
        private DataContext context;

        //public SelectList CategoriesSelectList { get; set; }

        public FormHandlerModel(DataContext dbContext)
        {
            context = dbContext;

            //CategoriesSelectList = new SelectList(context.Categories, "CategoryId", "Name");
        }

        public Product? Product { get; set; }

        public async Task<IActionResult> OnGetAsync(long id = 1)
        {
            Product = await context.Products
                                   .Include(p => p.Supplier)
                                   .Include(p => p.Category)
                                   .FirstOrDefaultAsync(p => p.ProductId == id);
        
            ViewData["categories"] =  new SelectList(context.Categories, "CategoryId", "Name");

            if (Product == null)
            {
                // another option(custom not found page)
                //return RedirectToPage("NotFound");
                return new NotFoundResult();
            }

            return Page();
        }

        public IActionResult OnPost()
        {
            foreach (string key in Request.Form.Keys.Where(k => !k.StartsWith("_")))
            {
                TempData[key] = string.Join(", ", Request.Form[key]);
            }

            return RedirectToPage("FormResults");
        }
    }
}