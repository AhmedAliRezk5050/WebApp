@page "/pages/form/{id:long?}"
@model FormHandlerModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore

<div class="m-2">
    <h5 class="bg-primary text-white text-center p-2">HTML Form</h5>
    <form asp-page="FormHandler" method="post" id="htmlform">
        <div class="mb-3">
            <label>Name</label>
            <input class="form-control"
                   asp-for="Product!.Name" />
        </div>
        <div class="mb-3">
            <label>Price</label>
            <input class="form-control"
                   asp-for="Product!.Price" />
        </div>
        <div class="mb-3">
            <label>Category</label>
            <input class="form-control" asp-for="Product!.Category!.Name" />
        </div>
        <div class="mb-3">
            <label>Supplier</label>
            <input class="form-control" asp-for="Product!.Supplier!.Name" />
        </div>
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </form>

    <button form="htmlform" asp-page="FormHandler" class="btn btn-primary mt-2">
        Submit (Outside Form)
    </button>
</div>

@functions {
    [IgnoreAntiforgeryToken]
    public class FormHandlerModel : PageModel
    {
        private DataContext context;

        public FormHandlerModel(DataContext dbContext)
        {
            context = dbContext;
        }

        public Product? Product { get; set; }

        public async Task<IActionResult> OnGetAsync(long id = 1)
        {
            Product = await context.Products
                                   .Include(p => p.Supplier)
                                   .Include(p => p.Category)
                                   .FirstAsync(p => p.ProductId == id);

            if (Product == null)
            {
                // another option(custom not found page)
                //return RedirectToPage("NotFound");
                return new NotFoundResult();
            }

            return Page();
        }

        public IActionResult OnPost()
        {
            foreach (string key in Request.Form.Keys.Where(k => !k.StartsWith("_")))
            {
                TempData[key] = string.Join(", ", Request.Form[key]);
            }

            return RedirectToPage("FormResults");
        }
    }
}